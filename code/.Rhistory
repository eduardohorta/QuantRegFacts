}
plot(v11(tau.grid), 1/q11(tau.grid), xlim=c(0,1))
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=0
v10 = function (tau) qbeta(tau, a10,b10)
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=0
dbplot(a10,b10)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=1
v01 = function(tau) qbeta(tau,a01,b01)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=1
dbplot(a01,b01)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=0
v00 = function(tau) qbeta(tau,a00,b00)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=0
dbplot(a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=1
v11 = function(tau) v10(tau) + v01(tau) - v00(tau)
# Plot of v11 (must be nondecreasing and with range contained in [0,1])
plot(tau.grid, v11(tau.grid))
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=1
q11 = function(tau) {
1/dbeta(v10(tau),a10,b10) + 1/dbeta(v01(tau),a01,b01) - 1/dbeta(v00(tau),a00,b00)
}
plot(v11(tau.grid), 1/q11(tau.grid), xlim=c(0,1))
# Plot of v11 (must be nondecreasing and with range contained in [0,1])
plot(tau.grid, v11(tau.grid))
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=0
dbplot(a00,b00)
plot(v11(tau.grid), 1/q11(tau.grid), xlim=c(0,1))
# Functional parameters for the quantile regression equation
alpha0 = v00
alpha1 = function(tau) v10(tau) - v00(tau)
theta1 = function(tau) v01(tau) - v00(tau)
# Quantile function of Y given ℱ[t-1]
Q = function(tau,Y.current,Z.current){
alpha0(tau) + alpha1(tau)*Y.current + theta1(tau)*Z.current
}
# Arbitrary starting point (Y0,Z0)
Y0 = runif(1)
Z0 = runif(1)
Y = Z = numeric()
Z.current = Z0
Y.current = Y0
T = 10000
for (t in 1:T){
# Simulates Y[t] given ℱ[t-1] using the Fundamental Theorem of Simulation
Y[t] = Q(runif(1), Y.current, Z.current)
Z[t] = runif(1)
# Q(runif(1), Z.current, Y.current)
# Z[t] = runif(1,max(Y[t]-.01,0),min(Y[t]+.01,1))
Z.current = Z[t]
Y.current = Y[t]
}
Y = Y[-1]
Z = Z[-1]
T = length(Y)
acf(Y)
pacf(Y)
plot(Y[2:T]~Y[1:(T-1)])
plot(Y[2:T]~Z[1:(T-1)])
hist(Y, border=NA, breaks="FD")
ts.plot(Y)
# True and estimated functional parameters
Yvec = Y[2:T]
Xmat = cbind(Y[1:(T-1)], Z[1:(T-1)])
qrfit = rq(Yvec~Xmat, tau = tau.grid)
plot(tau.grid, alpha0(tau.grid), type = 'l', col='blue', lwd=2, lty='dotted')
lines(tau.grid, coef(qrfit)[1,], lwd=2, col = rgb(0,0,0,.7))
plot(tau.grid, alpha1(tau.grid), type = 'l', col='blue', lwd=2, lty='dotted')
lines(tau.grid, coef(qrfit)[2,], lwd=2, col = rgb(0,0,0,.7))
plot(tau.grid, theta1(tau.grid), type = 'l', col='blue', lwd=2, lty='dotted')
lines(tau.grid, coef(qrfit)[3,], lwd=2, col = rgb(0,0,0,.7))
hist(Y, border=NA, breaks="FD")
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=0
dbplot(a10,b10)
dbplot(1,2)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 2; b10 = 1; a01 = 1; b01 = 1; a00 = 1; b00 = 2}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 2; b10 = 1; a01 = 2; b01 = 2; a00 = 1; b00 = 2}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 2; b10 = 1; a01 = 2; b01 = 1/2; a00 = 1; b00 = 2}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 2; b10 = 1; a01 = 2; b01 = 4; a00 = 1; b00 = 2}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 2; b10 = 1; a01 = 1; b01 = 4; a00 = 1; b00 = 2}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 2; b10 = 1; a01 = 1/2; b01 = 4; a00 = 1; b00 = 2}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 2; b10 = 1; a01 = 1/4; b01 = 4; a00 = 1; b00 = 2}
qdbplot(a10,b10, a01,b01, a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=0
v10 = function (tau) qbeta(tau, a10,b10)
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=0
dbplot(a10,b10)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=1
v01 = function(tau) qbeta(tau,a01,b01)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=1
dbplot(a01,b01)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=0
v00 = function(tau) qbeta(tau,a00,b00)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=0
dbplot(a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=1
v11 = function(tau) v10(tau) + v01(tau) - v00(tau)
# Plot of v11 (must be nondecreasing and with range contained in [0,1])
plot(tau.grid, v11(tau.grid))
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=1
q11 = function(tau) {
1/dbeta(v10(tau),a10,b10) + 1/dbeta(v01(tau),a01,b01) - 1/dbeta(v00(tau),a00,b00)
}
plot(v11(tau.grid), 1/q11(tau.grid), xlim=c(0,1))
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 2; b10 = 1; a01 = 1/4; b01 = 4; a00 = 1; b00 = 2}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 2; b10 = 1; a01 = 8; b01 = 8; a00 = 1; b00 = 2}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 2; a01 = 8; b01 = 8; a00 = 2; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 2; a01 = 4; b01 = 4; a00 = 2; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 2; a01 = 2; b01 = 2; a00 = 2; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 2; a01 = 2; b01 = 3; a00 = 2; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=0
v10 = function (tau) qbeta(tau, a10,b10)
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=0
dbplot(a10,b10)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=1
v01 = function(tau) qbeta(tau,a01,b01)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=1
dbplot(a01,b01)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=0
v00 = function(tau) qbeta(tau,a00,b00)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=0
dbplot(a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=1
v11 = function(tau) v10(tau) + v01(tau) - v00(tau)
# Plot of v11 (must be nondecreasing and with range contained in [0,1])
plot(tau.grid, v11(tau.grid))
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=1
q11 = function(tau) {
1/dbeta(v10(tau),a10,b10) + 1/dbeta(v01(tau),a01,b01) - 1/dbeta(v00(tau),a00,b00)
}
plot(v11(tau.grid), 1/q11(tau.grid), xlim=c(0,1))
dbplot(1,3)
dbplot(1,50)
dbplot(1,5)
dbplot(1/2,5)
dbplot(1,5)
dbplot(1,2)
dbplot(1,3)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 1; a01 = 2; b01 = 3; a00 = 1; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 1; a01 = 2; b01 = 2; a00 = 1; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 1; a01 = 2; b01 = 1; a00 = 1; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 1; a01 = 2; b01 = 4; a00 = 1; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 1; a01 = 2; b01 = 5; a00 = 1; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 1; a01 = 1; b01 = 5; a00 = 1; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 1; a01 = 1; b01 = 6; a00 = 1; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 3; b10 = 1; a01 = 1; b01 = 5; a00 = 1; b00 = 3}
qdbplot(a10,b10, a01,b01, a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=0
v10 = function (tau) qbeta(tau, a10,b10)
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=0
dbplot(a10,b10)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=1
v01 = function(tau) qbeta(tau,a01,b01)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=1
dbplot(a01,b01)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=0
v00 = function(tau) qbeta(tau,a00,b00)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=0
dbplot(a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=1
v11 = function(tau) v10(tau) + v01(tau) - v00(tau)
# Plot of v11 (must be nondecreasing and with range contained in [0,1])
plot(tau.grid, v11(tau.grid))
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=1
q11 = function(tau) {
1/dbeta(v10(tau),a10,b10) + 1/dbeta(v01(tau),a01,b01) - 1/dbeta(v00(tau),a00,b00)
}
plot(v11(tau.grid), 1/q11(tau.grid), xlim=c(0,1))
# Functional parameters for the quantile regression equation
alpha0 = v00
alpha1 = function(tau) v10(tau) - v00(tau)
theta1 = function(tau) v01(tau) - v00(tau)
# Quantile function of Y given ℱ[t-1]
Q = function(tau,Y.current,Z.current){
alpha0(tau) + alpha1(tau)*Y.current + theta1(tau)*Z.current
}
# Arbitrary starting point (Y0,Z0)
Y0 = runif(1)
Z0 = runif(1)
Y = Z = numeric()
Z.current = Z0
Y.current = Y0
T = 10000
for (t in 1:T){
# Simulates Y[t] given ℱ[t-1] using the Fundamental Theorem of Simulation
Y[t] = Q(runif(1), Y.current, Z.current)
Z[t] = runif(1)
# Q(runif(1), Z.current, Y.current)
# Z[t] = runif(1,max(Y[t]-.01,0),min(Y[t]+.01,1))
Z.current = Z[t]
Y.current = Y[t]
}
Y = Y[-1]
Z = Z[-1]
T = length(Y)
acf(Y)
pacf(Y)
plot(Y[2:T]~Y[1:(T-1)])
plot(Y[2:T]~Z[1:(T-1)])
hist(Y, border=NA, breaks="FD")
plot(Y[2:T]~Y[1:(T-1)])
plot(Y[2:T]~Z[1:(T-1)])
hist(Y, border=NA, breaks="FD")
ts.plot(Y)
# True and estimated functional parameters
Yvec = Y[2:T]
Xmat = cbind(Y[1:(T-1)], Z[1:(T-1)])
qrfit = rq(Yvec~Xmat, tau = tau.grid)
plot(tau.grid, alpha0(tau.grid), type = 'l', col='blue', lwd=2, lty='dotted')
lines(tau.grid, coef(qrfit)[1,], lwd=2, col = rgb(0,0,0,.7))
plot(tau.grid, alpha1(tau.grid), type = 'l', col='blue', lwd=2, lty='dotted')
lines(tau.grid, coef(qrfit)[2,], lwd=2, col = rgb(0,0,0,.7))
plot(tau.grid, theta1(tau.grid), type = 'l', col='blue', lwd=2, lty='dotted')
lines(tau.grid, coef(qrfit)[3,], lwd=2, col = rgb(0,0,0,.7))
hist(Y, border=NA, breaks="FD")
acf(Y)
dbplot(3,1)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 5; b01 = 1; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=0
v10 = function (tau) qbeta(tau, a10,b10)
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=0
dbplot(a10,b10)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=1
v01 = function(tau) qbeta(tau,a01,b01)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=1
dbplot(a01,b01)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=0
v00 = function(tau) qbeta(tau,a00,b00)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=0
dbplot(a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=1
v11 = function(tau) v10(tau) + v01(tau) - v00(tau)
# Plot of v11 (must be nondecreasing and with range contained in [0,1])
plot(tau.grid, v11(tau.grid))
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=1
q11 = function(tau) {
1/dbeta(v10(tau),a10,b10) + 1/dbeta(v01(tau),a01,b01) - 1/dbeta(v00(tau),a00,b00)
}
plot(v11(tau.grid), 1/q11(tau.grid), xlim=c(0,1))
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 5; b01 = 1; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 5; b01 = 1.1; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 5; b01 = .8; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 5; b01 = .2; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 5; b01 = .7; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 6; b01 = .7; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 4; b01 = .7; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 4; b01 = .8; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 4; b01 = .6; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 4; b01 = .5; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 4; b01 = .4; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 4; b01 = .1; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 4; b01 = .2; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 4; b01 = .3; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=0
v10 = function (tau) qbeta(tau, a10,b10)
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=0
dbplot(a10,b10)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=1
v01 = function(tau) qbeta(tau,a01,b01)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=1
dbplot(a01,b01)
# Parameters for the Beta quantile functions v10, v01 and v00
{a10 = 1; b10 = 3; a01 = 5; b01 = 1; a00 = 3; b00 = 1}
qdbplot(a10,b10, a01,b01, a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=0
v10 = function (tau) qbeta(tau, a10,b10)
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=0
dbplot(a10,b10)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=1
v01 = function(tau) qbeta(tau,a01,b01)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=1
dbplot(a01,b01)
# Conditional quantile function of Y[t] given Y[t-1] = 0 and X[t-1]=0
v00 = function(tau) qbeta(tau,a00,b00)
# Conditional density of Y[t] given Y[t-1] = 0 and X[t-1]=0
dbplot(a00,b00)
# Conditional quantile function of Y[t] given Y[t-1] = 1 and X[t-1]=1
v11 = function(tau) v10(tau) + v01(tau) - v00(tau)
# Plot of v11 (must be nondecreasing and with range contained in [0,1])
plot(tau.grid, v11(tau.grid))
# Conditional density of Y[t] given Y[t-1] = 1 and X[t-1]=1
q11 = function(tau) {
1/dbeta(v10(tau),a10,b10) + 1/dbeta(v01(tau),a01,b01) - 1/dbeta(v00(tau),a00,b00)
}
plot(v11(tau.grid), 1/q11(tau.grid), xlim=c(0,1))
# Functional parameters for the quantile regression equation
alpha0 = v00
alpha1 = function(tau) v10(tau) - v00(tau)
theta1 = function(tau) v01(tau) - v00(tau)
# Quantile function of Y given ℱ[t-1]
Q = function(tau,Y.current,Z.current){
alpha0(tau) + alpha1(tau)*Y.current + theta1(tau)*Z.current
}
# Arbitrary starting point (Y0,Z0)
Y0 = runif(1)
Z0 = runif(1)
Y = Z = numeric()
Z.current = Z0
Y.current = Y0
T = 10000
for (t in 1:T){
# Simulates Y[t] given ℱ[t-1] using the Fundamental Theorem of Simulation
Y[t] = Q(runif(1), Y.current, Z.current)
Z[t] = runif(1)
# Q(runif(1), Z.current, Y.current)
# Z[t] = runif(1,max(Y[t]-.01,0),min(Y[t]+.01,1))
Z.current = Z[t]
Y.current = Y[t]
}
Y = Y[-1]
Z = Z[-1]
T = length(Y)
acf(Y)
pacf(Y)
plot(Y[2:T]~Y[1:(T-1)])
plot(Y[2:T]~Z[1:(T-1)])
# Arbitrary starting point (Y0,Z0)
Y0 = runif(1)
Z0 = runif(1)
Y = Z = numeric()
Z.current = Z0
Y.current = Y0
T = 10000
for (t in 1:T){
# Simulates Y[t] given ℱ[t-1] using the Fundamental Theorem of Simulation
Y[t] = Q(runif(1), Y.current, Z.current)
Z[t] = Q(runif(1), Z.current, Y.current)
# Q(runif(1), Z.current, Y.current)
# Z[t] = runif(1,max(Y[t]-.01,0),min(Y[t]+.01,1))
Z.current = Z[t]
Y.current = Y[t]
}
Y = Y[-1]
Z = Z[-1]
T = length(Y)
acf(Y)
pacf(Y)
plot(Y[2:T]~Y[1:(T-1)])
plot(Y[2:T]~Z[1:(T-1)])
hist(Y, border=NA, breaks="FD")
ts.plot(Y)
# True and estimated functional parameters
Yvec = Y[2:T]
Xmat = cbind(Y[1:(T-1)], Z[1:(T-1)])
qrfit = rq(Yvec~Xmat, tau = tau.grid)
plot(tau.grid, alpha0(tau.grid), type = 'l', col='blue', lwd=2, lty='dotted')
lines(tau.grid, coef(qrfit)[1,], lwd=2, col = rgb(0,0,0,.7))
plot(tau.grid, alpha1(tau.grid), type = 'l', col='blue', lwd=2, lty='dotted')
lines(tau.grid, coef(qrfit)[2,], lwd=2, col = rgb(0,0,0,.7))
plot(tau.grid, theta1(tau.grid), type = 'l', col='blue', lwd=2, lty='dotted')
lines(tau.grid, coef(qrfit)[3,], lwd=2, col = rgb(0,0,0,.7))
acf(Y, )
acf(Y, lwd=2)
acf(Y, lwd=2, lend=3)
acf(Y, lwd=16, lend=3)
acf(Y, lwd=16, lend=3, col='gray')
acf(Y, lwd=32, lend=3, col='gray')
acf(Y, lwd=16, lend=3, col='gray')
pacf(Y, lwd=16, lend=3, col='gray')
acf(Y, lwd=16, lend=3, col='gray')
plot(Y[2:T]~Y[1:(T-1)])
plot(Y[2:T]~Y[1:(T-1)], pch=16)
plot(Y[2:T]~Z[1:(T-1)], pch=16)
T = 4000
for (t in 1:T){
# Simulates Y[t] given ℱ[t-1] using the Fundamental Theorem of Simulation
Y[t] = Q(runif(1), Y.current, Z.current)
Z[t] = Q(runif(1), Z.current, Y.current)
# Q(runif(1), Z.current, Y.current)
# Z[t] = runif(1,max(Y[t]-.01,0),min(Y[t]+.01,1))
Z.current = Z[t]
Y.current = Y[t]
}
Y = Y[-1]
Z = Z[-1]
T = length(Y)
acf(Y, lwd=16, lend=3, col='gray')
pacf(Y, lwd=16, lend=3, col='gray')
plot(Y[2:T]~Y[1:(T-1)], pch=16)
# Arbitrary starting point (Y0,Z0)
Y0 = runif(1)
Z0 = runif(1)
Y = Z = numeric()
Z.current = Z0
Y.current = Y0
T = 4000
for (t in 1:T){
# Simulates Y[t] given ℱ[t-1] using the Fundamental Theorem of Simulation
Y[t] = Q(runif(1), Y.current, Z.current)
Z[t] = Q(runif(1), Z.current, Y.current)
# Q(runif(1), Z.current, Y.current)
# Z[t] = runif(1,max(Y[t]-.01,0),min(Y[t]+.01,1))
Z.current = Z[t]
Y.current = Y[t]
}
Y = Y[-1]
Z = Z[-1]
T = length(Y)
acf(Y, lwd=16, lend=3, col='gray')
pacf(Y, lwd=16, lend=3, col='gray')
plot(Y[2:T]~Y[1:(T-1)], pch=16)
plot(Y[2:T]~Z[1:(T-1)], pch=16)
plot(Y[2:T]~Y[1:(T-1)], pch=rgb(0,0,0,.5))
plot(Y[2:T]~Y[1:(T-1)], pch=16, col=rgb(0,0,0,.5))
plot(Y[2:T]~Z[1:(T-1)], pch=16, col=rgb(0,0,0,.5))
hist(Y, border=NA, breaks="FD")
T = 8000
for (t in 1:T){
# Simulates Y[t] given ℱ[t-1] using the Fundamental Theorem of Simulation
Y[t] = Q(runif(1), Y.current, Z.current)
Z[t] = Q(runif(1), Z.current, Y.current)
# Q(runif(1), Z.current, Y.current)
# Z[t] = runif(1,max(Y[t]-.01,0),min(Y[t]+.01,1))
Z.current = Z[t]
Y.current = Y[t]
}
Y = Y[-1]
Z = Z[-1]
T = length(Y)
acf(Y, lwd=16, lend=3, col='gray')
pacf(Y, lwd=16, lend=3, col='gray')
plot(Y[2:T]~Y[1:(T-1)], pch=16, col=rgb(0,0,0,.5))
plot(Y[2:T]~Z[1:(T-1)], pch=16, col=rgb(0,0,0,.5))
hist(Y, border=NA, breaks="FD")
T = 10001
for (t in 1:T){
# Simulates Y[t] given ℱ[t-1] using the Fundamental Theorem of Simulation
Y[t] = Q(runif(1), Y.current, Z.current)
Z[t] = Q(runif(1), Z.current, Y.current)
# Q(runif(1), Z.current, Y.current)
# Z[t] = runif(1,max(Y[t]-.01,0),min(Y[t]+.01,1))
Z.current = Z[t]
Y.current = Y[t]
}
Y = Y[-1]
Z = Z[-1]
T = length(Y)
acf(Y, lwd=16, lend=3, col='gray')
pacf(Y, lwd=16, lend=3, col='gray')
plot(Y[2:T]~Y[1:(T-1)], pch=16, col=rgb(0,0,0,.4))
plot(Y[2:T]~Z[1:(T-1)], pch=16, col=rgb(0,0,0,.4))
hist(Y, border=NA, breaks="FD")
